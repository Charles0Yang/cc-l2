# 2 "lexer.mll"
 
  open Parser
  open Lexing 

(* next_line copied from  Ch. 16 of "Real Workd Ocaml" *) 
let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1
    }


# 16 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\001\000\227\255\015\000\230\255\002\000\003\000\
    \000\000\005\000\000\000\000\000\005\000\002\000\012\000\009\000\
    \015\000\011\000\247\255\248\255\000\000\250\255\251\255\013\000\
    \014\000\254\255\255\255\253\255\252\255\228\255\246\255\236\255\
    \245\255\004\000\009\000\014\000\244\255\025\000\242\255\027\000\
    \013\000\028\000\243\255\231\255\235\255\022\000\016\000\031\000\
    \241\255\028\000\026\000\034\000\240\255\239\255\031\000\025\000\
    \238\255\022\000\237\255\031\000\234\255\041\000\233\255\038\000\
    \037\000\033\000\232\255\004\000\252\255\005\000\002\000\254\255\
    \019\000\255\255\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\030\000\255\255\026\000\255\255\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\255\255\255\255\006\000\255\255\255\255\030\000\
    \030\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \003\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\068\000\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\003\000\003\000\071\000\002\000\071\000\000\000\
    \000\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\019\000\029\000\025\000\069\000\017\000\072\000\074\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\023\000\018\000\073\000\022\000\024\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\030\000\028\000\027\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\059\000\006\000\045\000\011\000\014\000\013\000\063\000\
    \061\000\016\000\057\000\054\000\009\000\049\000\035\000\053\000\
    \044\000\034\000\007\000\010\000\015\000\032\000\008\000\012\000\
    \040\000\037\000\039\000\033\000\036\000\031\000\038\000\043\000\
    \041\000\042\000\046\000\047\000\048\000\050\000\051\000\052\000\
    \055\000\056\000\058\000\060\000\062\000\064\000\065\000\066\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\002\000\070\000\000\000\067\000\255\255\
    \255\255\067\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\000\000\067\000\000\000\067\000\069\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\072\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\017\000\023\000\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\008\000\000\000\013\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\009\000\010\000\000\000\012\000\034\000\011\000\
    \013\000\015\000\000\000\000\000\000\000\016\000\000\000\000\000\
    \014\000\033\000\014\000\015\000\035\000\016\000\037\000\039\000\
    \040\000\041\000\045\000\046\000\047\000\049\000\050\000\051\000\
    \054\000\055\000\057\000\059\000\061\000\063\000\064\000\065\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\067\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 21 "lexer.mll"
                    ( token lexbuf )
# 150 "lexer.ml"

  | 1 ->
# 22 "lexer.mll"
                    ( ADD )
# 155 "lexer.ml"

  | 2 ->
# 23 "lexer.mll"
              ( GTEQ )
# 160 "lexer.ml"

  | 3 ->
# 24 "lexer.mll"
              ( ASSIGN )
# 165 "lexer.ml"

  | 4 ->
# 25 "lexer.mll"
              ( EQUAL )
# 170 "lexer.ml"

  | 5 ->
# 26 "lexer.mll"
              ( DEREF )
# 175 "lexer.ml"

  | 6 ->
# 27 "lexer.mll"
                    ( LPAREN )
# 180 "lexer.ml"

  | 7 ->
# 28 "lexer.mll"
                    ( RPAREN )
# 185 "lexer.ml"

  | 8 ->
# 29 "lexer.mll"
                    ( SEMICOLON )
# 190 "lexer.ml"

  | 9 ->
# 30 "lexer.mll"
              ( ARROW )
# 195 "lexer.ml"

  | 10 ->
# 31 "lexer.mll"
               ( IF )
# 200 "lexer.ml"

  | 11 ->
# 32 "lexer.mll"
                  ( THEN )
# 205 "lexer.ml"

  | 12 ->
# 33 "lexer.mll"
                   ( ELSE )
# 210 "lexer.ml"

  | 13 ->
# 34 "lexer.mll"
                 ( TRUE )
# 215 "lexer.ml"

  | 14 ->
# 35 "lexer.mll"
                   ( FALSE )
# 220 "lexer.ml"

  | 15 ->
# 36 "lexer.mll"
                 ( WHILE )
# 225 "lexer.ml"

  | 16 ->
# 37 "lexer.mll"
                 ( DO )
# 230 "lexer.ml"

  | 17 ->
# 38 "lexer.mll"
                ( SKIP )
# 235 "lexer.ml"

  | 18 ->
# 39 "lexer.mll"
               ( LET )
# 240 "lexer.ml"

  | 19 ->
# 40 "lexer.mll"
              ( IN )
# 245 "lexer.ml"

  | 20 ->
# 41 "lexer.mll"
              ( FN )
# 250 "lexer.ml"

  | 21 ->
# 42 "lexer.mll"
               ( VAL )
# 255 "lexer.ml"

  | 22 ->
# 43 "lexer.mll"
               ( REC )
# 260 "lexer.ml"

  | 23 ->
# 44 "lexer.mll"
                    ( BEGIN )
# 265 "lexer.ml"

  | 24 ->
# 45 "lexer.mll"
                    ( END )
# 270 "lexer.ml"

  | 25 ->
# 46 "lexer.mll"
                    ( EOF )
# 275 "lexer.ml"

  | 26 ->
# 47 "lexer.mll"
                 ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 280 "lexer.ml"

  | 27 ->
# 48 "lexer.mll"
          ( comment lexbuf; token lexbuf )
# 285 "lexer.ml"

  | 28 ->
# 49 "lexer.mll"
             ( next_line lexbuf; token lexbuf )
# 290 "lexer.ml"

  | 29 ->
# 50 "lexer.mll"
         ( EOF )
# 295 "lexer.ml"

  | 30 ->
# 51 "lexer.mll"
       ( Errors.complain ("Lexer : Illegal character " ^ (Char.escaped(Lexing.lexeme_char lexbuf 0)))
)
# 301 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 67
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 55 "lexer.mll"
         ( () )
# 313 "lexer.ml"

  | 1 ->
# 56 "lexer.mll"
            ( next_line lexbuf; comment lexbuf )
# 318 "lexer.ml"

  | 2 ->
# 57 "lexer.mll"
         (comment lexbuf; comment lexbuf )
# 323 "lexer.ml"

  | 3 ->
# 58 "lexer.mll"
      ( comment lexbuf )
# 328 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

